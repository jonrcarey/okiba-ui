# {{ name }}

A complete collection of Okiba tools and components that help you to manage UI elements and behaviors
______

## Installation

You can grab all Okiba UI packages as an unique `npm` package
```bash
npm i --save @okiba/ui
```

## Usage

#### Untranspiled code ðŸ›‘
Okiba UI packages are not transpiled, so __don't forget to transpile them with your favourite bundler__.
For example, using Babel with Webpack, you should prevent imports from okiba to be excluded from transpilation, like follows:
```javascript
{
  test: /\.js$/,
  exclude: /node_modules\/(?!(@okiba)\/).*/,
  use: {
    loader: 'babel-loader',
    options: {
      presets: ['@babel/preset-env']
    }
  }
}
```

## Full Components List:
{% if packages %}
{% for pkg in packages %}
{% if not pkg.parent -%}
#### [{{ pkg.name }}]({{ pkg.url }})
{{pkg.description}}
{% if pkg.members -%}
###### {% for m in pkg.members -%}
[`{{ m.name }}`]({{ m.url }}){%- if not loop.last %}, {% endif -%}
{%- endfor -%}
{%- endif %}
{% if pkg.submodules -%}
#### Submodules:
{% for s in pkg.submodules %}
##### â€¢ [{{s.name}}]({{s.url}})
{{s.description}}
{% if s.members %}
###### {% for sm in s.members -%}
[`{{ sm.name }}`]({{ s.url }}){%- if not loop.last %}, {% endif -%}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% if not loop.last %}---{% endif %}
{% endif %}
{% endfor %}
{% endif %}
